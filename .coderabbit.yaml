# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
# CodeRabbit config docs: https://docs.coderabbit.ai/reference/configuration

# General settings
language: "en-US"
early_access: true

# REVIEW CONFIGURATION
reviews:
  profile: "chill"
  review_status: true
  commit_status: true
  fail_commit_status: false
  request_changes_workflow: false
  in_progress_fortune: false

  high_level_summary: false
  high_level_summary_in_walkthrough: false
  collapse_walkthrough: true
  changed_files_summary: false
  sequence_diagrams: false
  estimate_code_review_effort: false
  poem: false

  related_issues: false
  related_prs: false

  suggested_labels: false
  auto_apply_labels: false
  suggested_reviewers: false
  auto_assign_reviewers: false

  # Automatic review scheduling
  auto_review:
    enabled: true
    drafts: false
    base_branches:
      - main
      - v*
  # Exclude [bot] from triggering
  # since CodeRabbit skips them anyway
    ignore_usernames:
      - "copilot[bot]"
      - "github-copilot[bot]"
      - "github-actions[bot]"

  # Code enhancement features
  finishing_touches:
    docstrings:
      enabled: false              # Generate docstrings for PRs/MRs (default: true)
    unit_tests:
      enabled: false              # Generate unit tests for PRs/MRs (default: true)

  # Pre-merge validation checks
  pre_merge_checks:
    docstrings:                   # Docstring coverage check (default: warning)
      mode: off
    description:                  # PR description validation (default: warning)
      mode: off
    issue_assessment:             # Linked issue assessment (default: warning)
      mode: off
    title:                        # PR title validation (default: warning)
      mode: "warning"
      requirements: |
        PR titles must follow the Conventional Commit format `type: Subject`, where `type` is one of {feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert, plan} and `Subject` starts uppercase and stays â‰¤ 65 characters.

  # Files to include/exclude from reviews
  path_filters:
    - "**"                  # Include all (base)
    - "!.specify/"          # Spec Kit (except memory)
    - ".specify/memory/**"  # (keep memory)
    - "!.github/prompts/speckit.*"  # Spec Kit command templates
    - "!node_modules/"      # NPM dependencies
    - "!*-lock.json"        # NPM/PNPM lock files
    - "!packages/"          # NuGet packages cache
    - "!.jekyll-cache/"     # Jekyll cache
    - "!vendor/"            #  and gem files
    - "!Gemfile.lock"       # Ruby dependencies lock
    - "!bin/"               # .NET build output
    - "!obj/"               # .NET build intermediate files
    - "!*.g.cs"             # Generated source files
    - "!*.xlsx"             # Manual calculation spreadsheets
    - "!*.bak"              # Backup files

  # Path-based configuration
  path_instructions:

    # Spec Kit ephemeral planning documents - Allow historical context
    - path: "specs/**/*.md"
      instructions: |
        These are ephemeral planning documents that track feature evolution and decision-making.
        Unlike production documentation, specs/ files are permitted to:
        - Include historical context and references to past PRs (e.g., "Updated per PR #1496")
        - Use past-tense descriptions of changes and iterations
        - Reference previous tooling or earlier versions of features
        - Document the evolution of requirements and design decisions

        Focus review on:
        - Adherance to Spec Kit conventions and `.github\instructions\spec-kit.instructions.md`
        - Technical accuracy of planned implementations
        - Consistency with repository architecture, constitution, and pre-existing instructions
        - Completeness of requirements and success criteria
        - Alignment between spec, plan, and task artifacts

    # Indicator documentation pages must stay aligned with the current API surface
    - path: "docs/_indicators/*.md"
      instructions: |
        Keep each indicator page synchronized with its public API:
        - Refresh the primary usage example (extension method and `Get{Indicator}` call) to match the latest signature and defaults
        - Document required and optional parameters, warmup expectations, and key output columns
        - Note any behavior changes, streaming considerations, or spec references introduced by the PR

    # Source code - Focus on financial accuracy and performance
    - path: "src/**/*.cs"
      instructions: |
        Focus on:
        - **Mathematical accuracy**: Verify financial calculations against reference implementations
        - **Performance**: Flag unnecessary allocations, excessive LINQ, boxing operations
        - **Precision**: Ensure appropriate use of `double` vs `decimal` for financial calculations
        - **Null safety**: Validate handling of insufficient data scenarios
        - **Input validation**: Check parameter validation and error handling
        - **Lookback periods**: Verify off-by-one errors in window calculations
        - **Streaming support**: Ensure stateful indicators handle edge cases properly
        - **Memory efficiency**: Check for proper span usage and buffer management
        - **XML documentation**: Ensure all public APIs have complete documentation

    # Test files - Ensure comprehensive coverage and accuracy validation
    - path: "tests/**/*.cs"
      instructions: |
        Review for:
        - **Test coverage**: Ensure edge cases and boundary conditions are tested
        - **Mathematical validation**: Verify tests use manually calculated results
        - **Performance tests**: Check benchmark tests for regression detection
        - **Integration tests**: Validate API compatibility and chaining scenarios
        - **Streaming tests**: Ensure real-time scenarios are properly tested
        - **Error scenarios**: Verify exception handling and invalid input tests

    # Catalog files - API definition accuracy
    - path: "**/*.Catalog.cs"
      instructions: |
        Verify:
        - **Parameter definitions**: Check types, defaults, constraints match implementation
        - **Result definitions**: Ensure property names match Models exactly
        - **IReusable flags**: Verify only one result per indicator has isReusable=true
        - **Method names**: Follow To{IndicatorName} pattern consistently
        - **Category assignments**: Use appropriate technical analysis categories

    # Documentation - Accuracy and completeness
    - path: "docs/**/*.md"
      instructions: |
        Check for:
        - **Accuracy**: Ensure content matches current implementation
        - **Completeness**: Verify examples, parameters, and return values are documented
        - **Accessibility**: Flag missing alt text, poor heading hierarchy
        - **Link validity**: Check for broken internal/external links
        - **Mathematical formulas**: Verify calculation descriptions are correct

    # Jekyll site files
    - path: "docs/**/*.{html,liquid,scss,js}"
      instructions: |
        Focus on:
        - **Accessibility**: WCAG compliance, semantic HTML, proper ARIA labels
        - **Performance**: Optimize images, minimize CSS/JS, efficient loading
        - **Mobile responsiveness**: Ensure layouts work across devices
        - **SEO**: Check meta tags, structured data, semantic markup

    # Configuration and workflow files
    - path: ".github/**/*.yml"
      instructions: |
        Review for:
        - **Security**: No secrets in workflows, proper permissions
        - **Efficiency**: Optimize CI/CD performance, avoid redundant builds
        - **Dependencies**: Keep actions and versions current
        - **Error handling**: Proper failure scenarios and notifications

    # Project files and build configuration
    - path: "**/*.{csproj,props,targets,sln}"
      instructions: |
        Verify:
        - **Version consistency**: Package versions, target frameworks alignment
        - **Security**: No vulnerable packages, proper security settings
        - **Performance**: Compiler optimizations enabled for release builds
        - **Analyzers**: Code quality rules properly configured
        - **Packaging**: NuGet metadata complete and accurate

  # Tool integrations
  tools:
    gitleaks:
      enabled: true
    semgrep:
      enabled: true
    osvScanner:
      enabled: true
    markdownlint:
      enabled: true
    yamllint:
      enabled: true
    actionlint:
      enabled: true
    shellcheck:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 120000
    eslint:
      enabled: false
    ruff:
      enabled: false
    golangci-lint:
      enabled: false
    hadolint:
      enabled: false
    checkov:
      enabled: false
    htmlhint:
      enabled: false
    languagetool:
      enabled: false
    biome:
      enabled: false
    oxc:
      enabled: false

# KNOWLEDGE BASE CONFIGURATION
knowledge_base:
  opt_out: false
  code_guidelines:
    enabled: true
    filePatterns:
      - ".github/copilot-instructions.md"
      - ".github/instructions/*.instructions.md"
      - ".github/instructions/**/*.instructions.md"
  learnings:
    scope: "auto"
  issues:
    scope: "auto"
  pull_requests:
    scope: "auto"
  mcp:
    usage: "auto"

# CUSTOM CHECKS for financial calculations
checks:
  # Financial accuracy patterns
  - pattern: "decimal.*price"
    message: "Consider if `decimal` precision is necessary for this price calculation. Default to `double` for performance unless business accuracy requires decimal precision."

  - pattern: "double\\.NaN"
    message: "Ensure NaN handling is appropriate for this financial calculation scenario."

  # Performance patterns
  - pattern: "\\.ToList\\(\\)"
    message: "Avoid unnecessary .ToList() calls in performance-critical paths. Consider using spans or direct enumeration."

  - pattern: "LINQ.*\\.Where.*\\.Select.*\\.Where"
    message: "Multiple LINQ chains may impact performance. Consider consolidating or using span-based operations."

  # Validation patterns
  - pattern: "ArgumentOutOfRangeException"
    message: "Ensure lookback period validation includes edge cases and provides clear error messages."

  # Documentation patterns
  - pattern: "public.*class.*\\{[^/]*$"
    message: "Public classes should have XML documentation comments explaining their purpose and usage."

  - pattern: "public.*\\(.*\\).*=>.*;"
    message: "Public methods should include XML documentation with parameter descriptions and return value details."

# TOOL INTEGRATIONS
integration:
  editorconfig: true              # Respect existing .editorconfig rules
  dotnet_analyzers: true          # Work with existing analyzers
  github_actions: true            # Coordinate with existing GitHub workflows

# REPORTING PREFERENCES
reporting:

  metrics:                        # Key metrics for this repository type
    - "test_coverage"
    - "code_duplication"
    - "cyclomatic_complexity"
    - "maintainability_index"
    - "performance_indicators"

  focus_areas:                    # Focus areas for dashboard
    - "mathematical_accuracy"
    - "performance_optimization"
    - "api_consistency"
    - "documentation_completeness"
    - "test_coverage"

# REVIEW TEMPLATES
templates:
  performance_review: |
    ## Performance Analysis
    - [ ] No unnecessary allocations in hot paths
    - [ ] Appropriate use of spans for array operations
    - [ ] LINQ usage optimized for performance
    - [ ] Proper handling of large datasets

  financial_accuracy: |
    ## Financial Calculation Review
    - [ ] Mathematical formulas verified against references
    - [ ] Precision appropriate (double vs decimal)
    - [ ] Edge cases handled (insufficient data, overflow)
    - [ ] Lookback periods calculated correctly

  api_consistency: |
    ## API Design Review
    - [ ] Method names follow To{IndicatorName} pattern
    - [ ] Parameter validation comprehensive
    - [ ] Return types consistent with similar indicators
    - [ ] XML documentation complete and accurate
