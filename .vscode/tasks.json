{
  // See https://go.microsoft.com/fwlink/?LinkId=733558 foo
  // for the documentation about the tasks.json format.
  // Schema: https://code.visualstudio.com/docs/reference/tasks-appendix
  "version": "2.0.0",
  "inputs": [
    {
      "id": "featureDescription",
      "description": "Enter a brief description of the feature to implement",
      "default": "New indicator or feature",
      "type": "promptString"
    }
  ],

  // defaults
  "presentation": {
    "echo": true,
    "reveal": "always",
    "focus": false,
    "panel": "shared",
    "showReuseMessage": false,
    "clear": false
  },
  "problemMatcher": "$msCompile",
  "options": { "cwd": "${workspaceFolder}" },

  // tasks
  "tasks": [
    {
      "label": "Install: NPM Packages",
      "detail": "Install root workspace NPM dependencies",
      "type": "shell",
      "command": "npm install",
      "problemMatcher": [ "$tsc", "$eslint-stylish" ],
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem",
        "group": "install",
      }
    },
    {
      "label": "Analyze: Roslynator (solution)",
      "detail": "Run Roslynator analysis over the entire solution and write XML report",
      "type": "shell",
      "command": "powershell -NoProfile -ExecutionPolicy Bypass -Command \"New-Item -ItemType Directory -Force -Path .reports/roslynator | Out-Null; roslynator analyze '${workspaceFolder}/Stock.Indicators.sln' --ignore-compiler-diagnostics --report-suppressed-diagnostics --severity-level info --verbosity normal --output .reports/roslynator/report.xml --output-format xml\"",
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem",
        "group": "analysis"
      }
    },
    {
      "label": "Analyze: Roslynator (console)",
      "detail": "Run Roslynator analysis and print diagnostics to console",
      "type": "shell",
      "command": "roslynator analyze '${workspaceFolder}/Stock.Indicators.sln' --ignore-compiler-diagnostics --report-suppressed-diagnostics --severity-level info --verbosity normal",
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "revealProblems": "never"
      }
    },
    {
      "label": "Restore: .NET Packages",
      "detail": "Restore NuGet packages for solution",
      "type": "shell",
      "command": "dotnet restore",
      "problemMatcher": "$msCompile",
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem",
        "group": "install",
      }
    },
    {
      "label": "Install: Ruby Packages",
      "detail": "Install Ruby gems for docs site (Jekyll)",
      "type": "shell",
      "command": "bundle install --jobs 4 && bundle clean --force",
      "options": {
        "cwd": "${workspaceFolder}/docs",
        "env": {
          "BUNDLE_GEMFILE": "${workspaceFolder}/docs/Gemfile",
          "BUNDLE_PATH": "${workspaceFolder}/docs/vendor/bundle"
        }
      },
      "problemMatcher": {
        "owner": "bundle",
        "fileLocation": "relative",
        "pattern": { "regexp": "^(.*):(\\d+):\\s+(.*)$", "file": 1, "line": 2, "message": 3 }
      },
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem",
        "group": "install",
      }
    },
    {
      "label": "Update: Ruby Packages",
      "detail": "Update Ruby gems conservatively and clean",
      "type": "shell",
      "command": "bundle lock --add-platform x86_64-linux x64-mingw-ucrt && bundle update --conservative && bundle clean --force",
      "options": {
        "cwd": "${workspaceFolder}/docs",
        "env": {
          "BUNDLE_GEMFILE": "${workspaceFolder}/docs/Gemfile",
          "BUNDLE_PATH": "${workspaceFolder}/docs/vendor/bundle"
        }
      },
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem",
        "group": "install",
      }
    },
    {
      "label": "Restore: All Dependencies",
      "detail": "Restore both NPM and .NET packages in parallel",
      "dependsOn": [
        "Install: NPM Packages",
        "Restore: .NET Packages"
      ],
      "dependsOrder": "parallel"
    },
    {
      "label": "Clean: .NET Solution",
      "detail": "Clean build outputs (bin/obj) for solution",
      "type": "shell",
      "command": "dotnet clean -v minimal --nologo",
      "group": "build",
      "problemMatcher": "$msCompile",
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem",
        "group": "install",
      }
    },
    {
      "label": "Clean: Cache Folders",
      "detail": "Run NPM script clean (cache/temp)",
      "type": "npm",
      "script": "clean",
      "problemMatcher": [ "$tsc", "$eslint-stylish" ],
      "dependsOn": "Install: NPM Packages",
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem",
        "group": "install",
      }
    },
    {
      "label": "Build: .NET Solution (incremental)",
      "detail": "Incremental build of solution (default)",
      "type": "shell",
      "command": "dotnet build -v minimal --nologo",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": "$msCompile",
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem",
      }
    },
    {
      "label": "Build: .NET Solution (not incremental)",
      "detail": "Full rebuild without incremental compilation",
      "type": "shell",
      "command": "dotnet build -v minimal --nologo --no-incremental",
      "group": "build",
      "problemMatcher": "$msCompile",
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem"
      }
    },
    {
      "label": "Test: Unit tests",
      "detail": "Run unit tests only (excludes integration and regression tests)",
      "type": "shell",
      "command": "dotnet test tests/indicators/Tests.Indicators.csproj --no-restore --nologo --settings tests/tests.unit.runsettings",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "Test: Regression tests",
      "detail": "Run regression tests only (baseline validation)",
      "type": "shell",
      "command": "dotnet test tests/indicators/Tests.Indicators.csproj --no-restore --nologo --settings tests/tests.regression.runsettings",
      "group": "test",
      "problemMatcher": "$msCompile"
    },
    {
      "label": "Test: Integration",
      "detail": "Run integration tests only (requires external dependencies)",
      "type": "shell",
      "command": "dotnet test tests/integration/Tests.Integration.csproj --no-restore --nologo && dotnet test tests/public-api/Tests.PublicApi.csproj --no-restore --nologo",
      "group": "test",
      "problemMatcher": "$msCompile"
    },
    {
      "label": "Test: All tests",
      "detail": "Run all tests including integration tests",
      "type": "shell",
      "command": "dotnet test --no-restore --nologo",
      "group": "test",
      "problemMatcher": "$msCompile"
    },
    {
      "label": "Test: Unit tests with Coverage",
      "detail": "Run tests with coverage collection (npm script)",
      "type": "npm",
      "script": "test:coverage",
      "group": "test",
      "problemMatcher": "$msCompile"
    },
    {
      "label": "Lint: .NET Code (format check)",
      "detail": "Verify code formatting and style",
      "type": "shell",
      "command": "dotnet format --verify-no-changes --severity info --no-restore",
      "group": "test",
      "problemMatcher": "$msCompile",
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem"
      }
    },
    {
      "label": "Lint: Markdown Files",
      "detail": "Run markdownlint over documentation",
      "type": "npm",
      "script": "lint:md",
      "group": "test",
      "problemMatcher": "$markdownlint",
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem"
      }
    },
    {
      "label": "Lint: .NET Code & Markdown Files",
      "detail": "Run .NET format check and markdown in parallel",
      "dependsOn": [
        "Lint: .NET Code (format check)",
        "Lint: Markdown Files"
      ],
      "dependsOrder": "parallel",
      "group": "test",
      "presentation": {
        "reveal": "silent",
        "revealProblems": "onProblem"
      }
    },
    {
      "label": "Lint: Auto-fix formatting",
      "detail": "Auto-fix code format and markdown issues",
      "type": "npm",
      "script": "fixall",
      "problemMatcher": [ "$msCompile", "$markdownlint" ]
    },
    {
      "label": "Run: Doc Site with LiveReload",
      "detail": "Serve Jekyll docs site with livereload",
      "type": "shell",
      "command": "bundle exec jekyll serve --livereload --open-url",
      "dependsOn": "Install: Ruby Packages",
      "isBackground": true,
      "options": {
        "cwd": "${workspaceFolder}/docs",
        "env": {
          "BUNDLE_GEMFILE": "${workspaceFolder}/docs/Gemfile",
          "BUNDLE_PATH": "${workspaceFolder}/docs/vendor/bundle"
        }
      },
      "problemMatcher": {
        "owner": "jekyll",
        "pattern": {
          "regexp": ".*",
          "file": 0,
          "line": 0,
          "column": 0,
          "message": 0
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": ".*Configuration file:.*_config.yml.*",
          "endsPattern": ".*Server running.*"
        }
      },
      "presentation": {
        "clear": true,
        "panel": "dedicated",
        "group": "hosted"
      }
    },
    {
      "label": "Run: Documentation site (serve)",
      "detail": "Alias: run docs site (background) with simple readiness matcher",
      "type": "shell",
      "command": "bundle exec jekyll serve --livereload",
      "dependsOn": "Install: Ruby Packages",
      "isBackground": true,
      "options": {
        "cwd": "${workspaceFolder}/docs",
        "env": {
          "BUNDLE_GEMFILE": "${workspaceFolder}/docs/Gemfile",
          "BUNDLE_PATH": "${workspaceFolder}/docs/vendor/bundle"
        }
      },
      "problemMatcher": {
        "owner": "jekyll",
        "pattern": {
          "regexp": ".*",
          "file": 0,
          "line": 0,
          "column": 0,
          "message": 0
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": ".*Configuration file:.*_config.yml.*",
          "endsPattern": ".*Server running.*"
        }
      },
      "presentation": {
        "clear": true,
        "panel": "dedicated",
        "group": "hosted"
      }
    },
    {
      "label": "Run: Test Application",
      "detail": "Run the test application tool (exercises all indicators)",
      "type": "shell",
      "command": "dotnet run --project tools/application/Test.Application.csproj",
      "group": "none",
      "problemMatcher": "$msCompile",
      "presentation": {
        "clear": true,
        "panel": "dedicated",
        "group": "hosted"
      }
    },
    {
      "label": "Run: Performance Benchmarks (all)",
      "detail": "Run all BenchmarkDotNet performance tests (Release mode)",
      "type": "shell",
      "command": "dotnet run --project tools/performance/Tests.Performance.csproj -c Release",
      "group": "test",
      "problemMatcher": "$msCompile",
      "presentation": {
        "clear": true,
        "panel": "dedicated",
        "group": "performance"
      }
    },
    {
      "label": "Run: Performance Benchmarks (Series)",
      "detail": "Run Series indicator benchmarks only (Release mode)",
      "type": "shell",
      "command": "dotnet run --project tools/performance/Tests.Performance.csproj -c Release -- --filter *SeriesIndicators*",
      "group": "test",
      "problemMatcher": "$msCompile",
      "presentation": {
        "clear": true,
        "panel": "dedicated",
        "group": "performance"
      }
    },
    {
      "label": "Run: Performance Benchmarks (Buffer)",
      "detail": "Run Buffer indicator benchmarks only (Release mode)",
      "type": "shell",
      "command": "dotnet run --project tools/performance/Tests.Performance.csproj -c Release -- --filter *BufferIndicators*",
      "group": "test",
      "problemMatcher": "$msCompile",
      "presentation": {
        "clear": true,
        "panel": "dedicated",
        "group": "performance"
      }
    },
    {
      "label": "Run: Performance Benchmarks (Stream)",
      "detail": "Run Stream indicator benchmarks only (Release mode)",
      "type": "shell",
      "command": "dotnet run --project tools/performance/Tests.Performance.csproj -c Release -- --filter *StreamIndicators*",
      "group": "test",
      "problemMatcher": "$msCompile",
      "presentation": {
        "clear": true,
        "panel": "dedicated",
        "group": "performance"
      }
    },
    {
      "label": "Run: Simulation Demo",
      "detail": "Run streaming indicators simulation demo",
      "type": "shell",
      "command": "dotnet run --project tools/simulate/Test.Simulation.csproj",
      "group": "none",
      "problemMatcher": "$msCompile",
    },
    {
      "label": "Run: Generate test baseline data (all)",
      "detail": "Generate all regression test baseline JSON files",
      "type": "shell",
      "command": "dotnet run --project tools/baselining/BaselineGenerator.csproj -- --all",
      "group": "none",
      "problemMatcher": "$msCompile"
    },
    {
      "label": "SpecKit: Create New Feature",
      "detail": "Create new feature spec (will prompt for description)",
      "type": "shell",
      "command": "bash .specify/scripts/bash/create-new-feature.sh \"${input:featureDescription}\""
    },
    {
      "label": "SpecKit: Setup Plan",
      "detail": "Run setup plan script for current feature branch",
      "type": "shell",
      "command": "bash .specify/scripts/bash/setup-plan.sh"
    },
    {
      "label": "Setup: Dev tools",
      "detail": "Complete one-time environment setup (global tools, SpecKit, packages)",
      "type": "shell",
      "command": "bash .devcontainer/startup.sh",
      "problemMatcher": [ "$msCompile", "$eslint-compact" ]
    },
  ]
}
