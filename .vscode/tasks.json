{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Install: NPM Packages",
      "detail": "Install root workspace NPM dependencies",
      "type": "shell",
      "command": "npm install",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "reveal": "silent",
        "panel": "dedicated"
      }
    },
    {
      "label": "Restore: .NET Packages",
      "detail": "Restore NuGet packages for solution",
      "type": "shell",
      "command": "dotnet restore",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "silent",
        "panel": "dedicated"
      },
      "runOptions": {
        "runOn": "folderOpen"
      }
    },
    {
      "label": "Install: Ruby Packages",
      "detail": "Install Ruby gems for docs site (Jekyll)",
      "type": "shell",
      "command": "bundle install --jobs 4 && bundle clean --force",
      "options": {
        "cwd": "${workspaceFolder}/docs",
        "env": {
          "BUNDLE_GEMFILE": "${workspaceFolder}/docs/Gemfile",
          "BUNDLE_PATH": "${workspaceFolder}/docs/vendor/bundle"
        }
      },
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "reveal": "silent",
        "panel": "dedicated"
      }
    },
    {
      "label": "Update: Ruby Packages",
      "detail": "Update Ruby gems conservatively and clean",
      "type": "shell",
      "command": "bundle lock --add-platform x86_64-linux x64-mingw-ucrt && bundle update --conservative && bundle clean --force",
      "options": {
        "cwd": "${workspaceFolder}/docs",
        "env": {
          "BUNDLE_GEMFILE": "${workspaceFolder}/docs/Gemfile",
          "BUNDLE_PATH": "${workspaceFolder}/docs/vendor/bundle"
        }
      },
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "reveal": "silent",
        "panel": "dedicated"
      }
    },
    {
      "label": "Restore: All Dependencies",
      "detail": "Restore both NPM and .NET packages in parallel",
      "dependsOn": [
        "Install: NPM Packages",
        "Restore: .NET Packages"
      ],
      "dependsOrder": "parallel"
    },
    {
      "label": "Clean: .NET Solution",
      "detail": "Clean build outputs (bin/obj) for solution",
      "type": "shell",
      "command": "dotnet clean -v minimal --nologo",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      }
    },
    {
      "label": "Clean: Cache Folders",
      "detail": "Run NPM script clean (cache/temp)",
      "type": "npm",
      "script": "clean",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Build: .NET Solution (incremental)",
      "detail": "Incremental build of solution (default)",
      "type": "shell",
      "command": "dotnet build -v minimal --nologo",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Build: .NET Solution (not incremental)",
      "detail": "Full rebuild without incremental compilation",
      "type": "shell",
      "command": "dotnet build -v minimal --nologo --no-incremental",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      }
    },
    {
      "label": "Test: Unit tests",
      "detail": "Run unit tests only (excludes integration tests)",
      "type": "shell",
      "command": "dotnet test tests/indicators/Tests.Indicators.csproj --no-restore --nologo",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Test: Integration",
      "detail": "Run integration tests only (requires external dependencies)",
      "type": "shell",
      "command": "dotnet test tests/integration/Tests.Integration.csproj --no-restore --nologo && dotnet test tests/public-api/Tests.PublicApi.csproj --no-restore --nologo",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "test",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Test: All tests",
      "detail": "Run all tests including integration tests",
      "type": "shell",
      "command": "dotnet test --no-restore --nologo",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "test",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Test: Unit tests with Coverage",
      "detail": "Run tests with coverage collection (npm script)",
      "type": "npm",
      "script": "test:coverage",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Lint: .NET Code (format check)",
      "detail": "Verify code formatting and style",
      "type": "shell",
      "command": "dotnet format --verify-no-changes --severity info --no-restore",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Lint: Markdown Files",
      "detail": "Run markdownlint over documentation",
      "type": "npm",
      "script": "lint:md",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "problemMatcher": [
        {
          "owner": "markdownlint",
          "fileLocation": [
            "relative",
            "${workspaceFolder}"
          ],
          "pattern": {
            "regexp": "^(.*\\.md):(\\d+):(\\d+)\\s+([A-Z0-9/\\-]+)\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "code": 4,
            "message": 5
          }
        }
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true
      }
    },
    {
      "label": "Fix: Run fixall (code & md)",
      "detail": "Auto-fix code format and markdown issues",
      "type": "npm",
      "script": "fixall",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "problemMatcher": [
        "$msCompile",
        {
          "owner": "markdownlint",
          "fileLocation": [
            "relative",
            "${workspaceFolder}"
          ],
          "pattern": {
            "regexp": "^(.*\\.md):(\\d+):(\\d+)\\s+([A-Z0-9/\\-]+)\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "code": 4,
            "message": 5
          }
        }
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Run: Doc Site with LiveReload",
      "detail": "Serve Jekyll docs site with livereload",
      "type": "shell",
      "command": "bundle exec jekyll serve --livereload --open-url",
      "dependsOn": "Install: Ruby Packages",
      "isBackground": true,
      "options": {
        "cwd": "${workspaceFolder}/docs",
        "env": {
          "BUNDLE_GEMFILE": "${workspaceFolder}/docs/Gemfile",
          "BUNDLE_PATH": "${workspaceFolder}/docs/vendor/bundle"
        }
      },
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },
    {
      "label": "Docs: Serve",
      "detail": "Alias: run docs site (background) with simple readiness matcher",
      "type": "shell",
      "command": "bundle exec jekyll serve --livereload",
      "dependsOn": "Install: Ruby Packages",
      "isBackground": true,
      "options": {
        "cwd": "${workspaceFolder}/docs",
        "env": {
          "BUNDLE_GEMFILE": "${workspaceFolder}/docs/Gemfile",
          "BUNDLE_PATH": "${workspaceFolder}/docs/vendor/bundle"
        }
      },
      "problemMatcher": {
        "owner": "jekyll",
        "pattern": {
          "regexp": ".*",
          "file": 0,
          "line": 0,
          "column": 0,
          "message": 0
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": ".*Configuration file:.*_config.yml.*",
          "endsPattern": ".*Server running.*"
        }
      },
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      }
    },
    {
      "label": "Verify: Code & Docs Lint",
      "detail": "Run .NET format check and markdown lint sequentially",
      "dependsOn": [
        "Lint: .NET Code (format check)",
        "Lint: Markdown Files"
      ],
      "dependsOrder": "sequence",
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "Verify: Build & Test",
      "detail": "Composite: Restore → Build → Test",
      "dependsOn": [
        "Restore: .NET Packages",
        "Build: .NET Solution",
        "Test: .NET Solution"
      ],
      "dependsOrder": "sequence",
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    }
  ]
}
