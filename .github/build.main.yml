trigger:
  - master

pr:
  - master

pool:
  name: Azure Pipelines
  vmImage: "windows-2019"

variables:
  BuildConfiguration: "Release"

steps:
  - task: UseDotNet@2
    displayName: "use .NET SDK 5.0.x"
    inputs:
      version: 5.0.x

  - task: NuGetToolInstaller@1
    displayName: "use NuGet 5.8.x"
    inputs:
      versionSpec: 5.8.x
      checkLatest: false

  - task: DotNetCoreCLI@2
    displayName: "use GitVersion"
    inputs:
      command: custom
      custom: tool
      arguments: "install -g gitversion.tool --version 5.6.3"

  - task: DotNetCoreCLI@2
    displayName: "get version number"
    inputs:
      command: custom
      custom: gitversion
      arguments: "/output buildserver"

  - task: DotNetCoreCLI@2
    displayName: "create assembly info"
    inputs:
      command: 'custom'
      custom: 'gitversion'
      arguments: '/updateassemblyinfo AssemblyInfo.cs /ensureassemblyinfo'

  - task: DotNetCoreCLI@2
    displayName: build
    inputs:
      projects: "**/*.csproj"
      arguments: "--configuration $(BuildConfiguration) /p:Version=$(GitVersion.NuGetVersion)"

  - task: DotNetCoreCLI@2
    displayName: "test internal"
    inputs:
      command: test
      projects: "**/Tests.Indicators.csproj"
      arguments: "--configuration $(BuildConfiguration) --no-restore --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
      testRunTitle: "Library Internal Tests"

  - task: DotNetCoreCLI@2
    displayName: "test external"
    inputs:
      command: test
      projects: "**/Tests.External.csproj"
      arguments: "--configuration $(BuildConfiguration) --no-restore --no-build /p:CollectCoverage=false"
      publishTestResults: false
      testRunTitle: "Library External Tests"

  - task: PublishCodeCoverageResults@1
    displayName: "publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(Build.SourcesDirectory)/tests/indicators/coverage.cobertura.xml"

  - task: DotNetCoreCLI@2
    displayName: "pack for NuGet"
    inputs:
      command: 'pack'
      packagesToPack: 'indicators/Indicators.csproj'
      nobuild: true
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'GitVersion.NuGetVersion'

  - task: CopyFiles@2
    displayName: "stage artifacts"
    inputs:
      SourceFolder: "indicators"
      Contents: "**/*.nupkg"
      TargetFolder: "$(Build.ArtifactStagingDirectory)"
      CleanTargetFolder: true
      OverWrite: true
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: "save artifacts"
    inputs:
      ArtifactName: packages
