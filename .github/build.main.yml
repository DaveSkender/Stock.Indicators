trigger:
  - main

pr:
  - main

pool:
  name: Azure Pipelines
  vmImage: "ubuntu-latest"

workspace:
  clean: all

variables:
  BuildConfiguration: "Release"

steps:
  - task: gitversion/setup@0
    displayName: use GitVersion 5.x
    inputs:
      versionSpec: "5.x"

  - task: gitversion/execute@0
    displayName: get GitVersion
    inputs:
      useConfigFile: true
      configFilePath: "gitversion.yml"
      updateAssemblyInfo: true

  - task: UseDotNet@2
    displayName: "use .NET SDK 7.0.x"
    inputs:
      version: 7.0.x
      includePreviewVersions: false

  - task: DotNetCoreCLI@2
    displayName: build
    inputs:
      command: "build"
      projects: "**/*.csproj"
      arguments: >
        --configuration $(BuildConfiguration)
        /p:Version=$(GitVersion.NuGetVersion)
        /p:ContinuousIntegrationBuild=true
        /warnaserror

  - task: DotNetCoreCLI@2
    displayName: "test indicators"
    inputs:
      command: test
      testRunTitle: "Indicator Tests"
      projects: "tests/indicators/Tests.Indicators.csproj"
      arguments: >
        --configuration $(BuildConfiguration)
        --no-restore
        --no-build
        --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      publishTestResults: true

  - task: DotNetCoreCLI@2
    displayName: "test external/other"
    inputs:
      command: test
      testRunTitle: "External Tests"
      projects: "tests/external/Tests.Other.csproj"
      arguments: >
        --configuration $(BuildConfiguration)
        --no-restore
        --no-build
        /p:CollectCoverage=false
      publishTestResults: true

  - task: PublishCodeCoverageResults@1
    displayName: "publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(Agent.TempDirectory)/**/coverage.cobertura.xml"

  - task: DotNetCoreCLI@2
    displayName: "pack for NuGet"
    inputs:
      command: "pack"
      packagesToPack: "src/Indicators.csproj"
      nobuild: true
      versioningScheme: "byEnvVar"
      versionEnvVar: "GitVersion.NuGetVersion"

  - task: CopyFiles@2
    displayName: "stage artifacts"
    inputs:
      SourceFolder: "src"
      Contents: |
        "**/*.nupkg"
        "**/*.snupkg"
      TargetFolder: "$(Pipeline.Workspace)/a"
      CleanTargetFolder: true
      OverWrite: true
      flattenFolders: true

  - task: PublishPipelineArtifact@1
    displayName: "save artifacts"
    inputs:
      targetPath: "$(Pipeline.Workspace)/a"
      artifact: "packages"
      publishLocation: "pipeline"
