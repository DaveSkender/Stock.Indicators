name: TEST - Deploy NuGet package

on:
  pull_request:
    branches: ["main"]

  # workflow_dispatch:
  #   inputs:
  #     environment:
  #       description: Deployment environment
  #       type: choice
  #       options:
  #         - staging
  #         - nuget.org
  #       default: staging
  #       required: true
  #     preview:
  #       description: Append preview suffix
  #       type: boolean
  #       default: true
  #       required: true
#
# concurrency:
  # group: ${{ inputs.environment }}
  # cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.compose.outputs.version }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"
          dotnet-quality: "ga"

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: "5.x"
          preferLatestVersion: true

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1
        with:
          updateAssemblyInfo: true
          useConfigFile: true
          configFilePath: gitversion.yml

      - name: Compose version
        id: compose
        run: |
          COMPOSED_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}${{ '-TESTONLY' }}
          echo "version=$COMPOSED_VERSION" >> "$GITHUB_OUTPUT"
          echo "COMPOSED_VERSION=$COMPOSED_VERSION" >> "$GITHUB_ENV"

      - name: Get latest non-draft release tag
        id: get_last_tag
        run: echo "last_tag=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Generate release notes
        id: notes
        run: |
          last_tag=${{ env.last_tag }}
          release_notes=$(git log $last_tag..HEAD --pretty=format:"- %h %s (%an)" --grep='^(?!.*(docs|chore)).*$')
          echo "## Release Notes" > $GITHUB_OUTPUT
          echo "release_notes=$release_notes" >> $GITHUB_OUTPUT
          echo >> $GITHUB_OUTPUT
          echo "[more on GitHub](https://github.com/DaveSkender/Stock.Indicators/releases/tag/${{ steps.compose.outputs.version }}) â†’" >> $GITHUB_OUTPUT

      - name: Output release notes
        run: echo "${{ steps.notes.outputs.release_notes }}"

      - name: Build library
        run: >
          dotnet build src/Indicators.csproj
          --configuration Release
          --property:Version=${{ steps.compose.outputs.version }}
          --property:ContinuousIntegrationBuild=true
          -warnAsError

      - name: Pack for NuGet
        run: >
          dotnet pack src/Indicators.csproj
          --configuration Release
          --no-build
          --include-symbols
          --property:PackageVersion=${{ steps.compose.outputs.version }}
          --property:PackageReleaseNotes="${{ steps.notes.outputs.release_notes }}"
          --output NuGet

      - name: Save package
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: NuGet

      - name: Save project
        uses: actions/upload-artifact@v4
        with:
          name: project
          path: ./*.csproj

      - name: Summary output
        run: |
          {
            echo "| Version No. | Component                                       |"
            echo "| :---------- | :---------------------------------------------- |"
            echo "| Major       | ${{ steps.gitversion.outputs.major }}           |"
            echo "| Minor       | ${{ steps.gitversion.outputs.minor }}           |"
            echo "| Patch       | ${{ steps.gitversion.outputs.patch }}           |"
            echo "| Base        | ${{ steps.gitversion.outputs.majorMinorPatch }} |"
            echo "| Composed    | ${{ steps.compose.outputs.COMPOSED_VERSION }}   |"
            echo "${{ steps.notes.outputs.release_notes }}"
          } >> $GITHUB_STEP_SUMMARY
