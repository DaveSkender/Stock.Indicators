name: Pull request

on:
  pull_request_target:
    types:
      - opened
      - edited
      - unlabeled
      - ready_for_review

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: write
  issues: read
  repository-projects: write

jobs:
  main:
    name: lint PR title
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}

    steps:
      - uses: amannn/action-semantic-pull-request@v6.1.1
        id: lint_pr_title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
            plan
          subjectPattern: ^([A-Z]).+$
          subjectPatternError: >
            The subject "**{subject}**" must start with an uppercase character.
            Example: "Add feature" instead of "add feature"
          ignoreLabels: |
            bot
            dependencies
            automated

      - uses: marocchino/sticky-pull-request-comment@v2.9.4
        if: always() && (steps.lint_pr_title.outputs.error_message != null)
        with:
          header: pr-title-lint-error
          message: |
            ### ⚠️ Invalid Pull Request title

            Your PR title must follow the format: `type: Subject` where:
            - `type` is one of the conventional commit types (in lowercase)
            - `Subject` starts with an uppercase letter

            > [!CAUTION]
            > ${{ steps.lint_pr_title.outputs.error_message }}

            #### Valid examples

            - `feat: Add API endpoint for market data`
            - `fix: Resolve WebSocket connection issues`
            - `plan: Define technical implementation approach`
            - `chore: Update NuGet dependencies`

            <details>
            <summary>see more valid examples</summary>

            #### Features & fixes
            - `feat: Add API endpoint for market data`
            - `fix: Resolve WebSocket connection issues`

            #### Planning & architecture
            - `plan: Define technical implementation approach`

            #### Code quality
            - `style: Format trading strategy classes`
            - `refactor: Restructure trading engine components`
            - `perf: Optimize trade order execution flow`

            #### Documentation & testing
            - `docs: Update API documentation`
            - `test: Add unit tests for sign-in flow`

            #### Infrastructure
            - `build: Update .NET SDK version to 9.0`
            - `ci: Add workflow for performance testing`
            - `chore: Update NuGet dependencies`

            #### Other
            - `revert: Remove faulty market data provider`

            See [Conventional Commits](https://www.conventionalcommits.org)
            for more details.
            </details>

      # Delete a previous comment when the issue has been resolved
      - if: ${{ steps.lint_pr_title.outputs.error_message == null }}
        uses: marocchino/sticky-pull-request-comment@v2.9.4
        with:
          header: pr-title-lint-error
          delete: true

      # Add PR to project and update status to "In Progress" if not already there
      - name: Add PR to project
        uses: actions/add-to-project@v1.0.2
        if: ${{ steps.lint_pr_title.outputs.error_message == null }}
        id: add-project
        with:
          project-url: https://github.com/users/DaveSkender/projects/1
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check current project status
        id: check-status
        if: ${{ steps.lint_pr_title.outputs.error_message == null && steps.add-project.outputs.itemId }}
        run: |
          # Query the project item to get current status
          ITEM_ID="${{ steps.add-project.outputs.itemId }}"

          # Use GitHub CLI to get project item status
          CURRENT_STATUS=$(gh project item-view $ITEM_ID --owner DaveSkender --format json | jq -r '.fields[] | select(.name == "Status") | .value // "null"')

          echo "Current status: $CURRENT_STATUS"

          # Define status progression: Icebox < Maybe < Do Next < In Progress < In Review < Done
          # Only update if current status is one of: Icebox, Maybe, Do Next, or null/empty
          case "$CURRENT_STATUS" in
            "Icebox"|"Maybe"|"Do Next"|"null"|""|null)
              echo "should-update=true" >> $GITHUB_OUTPUT
              echo "Status '$CURRENT_STATUS' is before 'In Progress', will update"
              ;;
            *)
              echo "should-update=false" >> $GITHUB_OUTPUT
              echo "Status '$CURRENT_STATUS' is 'In Progress' or later, no update needed"
              ;;
          esac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Update project status to In Progress
        if: ${{ steps.lint_pr_title.outputs.error_message == null && steps.add-project.outputs.itemId && steps.check-status.outputs.should-update == 'true' }}
        run: |
          # Try using the display name as option ID (GitHub CLI may accept this)
          gh project item-edit \
            --id "${{ steps.add-project.outputs.itemId }}" \
            --field-id "1274949" \
            --project-id "151306" \
            --single-select-option-id "In Progress" || \
          # Fallback: use text parameter if option ID fails
          gh project item-edit \
            --id "${{ steps.add-project.outputs.itemId }}" \
            --field-id "1274949" \
            --project-id "151306" \
            --text "In Progress"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
