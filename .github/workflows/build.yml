name: "build"

on:
  push:
    branches: ["main"]
    paths:
      - 'src/**'
  pull_request:
    branches: ["main"]
    paths:
      - 'src/**'
      - 'docs/examples/**'
      - '.github/workflows/build.yml'

permissions:
  actions: write

jobs:
  analyze:
    name: test and pack
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
          preferLatestVersion: true

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          updateAssemblyInfo: true
          useConfigFile: true
          configFilePath: gitversion.yml

      - name: Display version
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'
          dotnet-quality: 'ga'

      - name: Build solution
        run: >
          dotnet build
          --configuration Release
          --property:Version=${{ steps.gitversion.outputs.nuGetVersion }}
          --property:ContinuousIntegrationBuild=true
          -warnaserror

      - name: Test library
        run: >
          dotnet test
          --configuration Release
          --no-build
          --logger trx
          --results-directory "TestResults"
          --collect "Code Coverage"

      - name: Save test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: TestResults
        if: ${{ always() }}

      - name: Pack for NuGet
        run: >
          dotnet pack
           ~/src/Indicators.csproj
          --configuration Release
          --no-build
          --include-symbols
          --property:PackageVersion=${{ steps.gitversion.outputs.nuGetVersion }}

      - name: Save NuGet package
        uses: actions/upload-artifact@v3
        with:
          name: nuget
          path: |
            **/*.nupkg
            **/*.snupkg
        if: ${{ always() }}
