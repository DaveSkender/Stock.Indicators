name: Copilot Environment Setup

on:
  workflow_dispatch:

permissions:
  contents: read
  issues: read
  repository-projects: write

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Python for Spec-Kit
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Setup uv package manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
        continue-on-error: true

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true
          working-directory: docs

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ">=22"
          cache: "npm"
          cache-dependency-path: package-lock.json
        continue-on-error: true

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: "9.x"
          dotnet-quality: "ga"

      - name: Install .NET & NPM global tools
        run: |
          dotnet tool install --global dotnet-format
          dotnet tool install --global roslynator.dotnet.cli
          dotnet tool install --global dotnet-outdated-tool
          dotnet tool install --global dotnet-reportgenerator-globaltool
          npm install --global @angular/cli
        continue-on-error: true

      - name: Install Spec-Kit CLI
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          uv tool install --force specify-cli --from git+https://github.com/github/spec-kit.git

          export PATH="$HOME/.local/bin:$PATH"
          specify --help || echo "Specify help not available"
        continue-on-error: true

      - name: Restore packages
        run: |
          dotnet restore && npm ci
        continue-on-error: true

      - name: Build .NET Solution
        run: |
          dotnet build --no-restore
        continue-on-error: true

      - name: Test environment
        run: |
          dotnet test --no-build --verbosity minimal
        continue-on-error: true

      - name: Environment summary
        run: |
          echo "## Copilot Environment Setup Complete ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Development Tools" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- .NET SDKs: $(dotnet --list-sdks | wc -l) versions available" >> $GITHUB_STEP_SUMMARY
          echo "- .NET Tools: $(dotnet tool list --global | wc -l) installed" >> $GITHUB_STEP_SUMMARY
          echo "- Python: $(python --version)" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js: $(node --version 2>/dev/null || echo 'Not available')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Spec-Kit Integration" >> $GITHUB_STEP_SUMMARY
          echo "- Spec-Kit CLI: $(~/.local/bin/specify --version 2>/dev/null || echo 'Installation pending')" >> $GITHUB_STEP_SUMMARY
          echo "- Constitution: âœ… Available at \`.specify/memory/constitution.md\`" >> $GITHUB_STEP_SUMMARY
          echo "- Specifications: âœ… Available at \`specs/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Commands" >> $GITHUB_STEP_SUMMARY
          echo "- \`/constitution\` - Review/update project principles" >> $GITHUB_STEP_SUMMARY
          echo "- \`/specify\` - Create feature specifications" >> $GITHUB_STEP_SUMMARY
          echo "- \`/plan\` - Define implementation approach" >> $GITHUB_STEP_SUMMARY
          echo "- \`/tasks\` - Generate actionable task breakdown" >> $GITHUB_STEP_SUMMARY
          echo "- \`/implement\` - Execute planned implementation" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      # Update project status for current branch if it has an associated PR
      - name: Find associated PR
        id: find-pr
        run: |
          # Get the current branch name
          BRANCH_NAME="${{ github.ref_name }}"

          # Check if there's an open PR for this branch
          PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --state open --json number --jq '.[0].number // empty')

          if [ -n "$PR_NUMBER" ]; then
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "Found PR #$PR_NUMBER for branch $BRANCH_NAME"
          else
            echo "No open PR found for branch $BRANCH_NAME"
          fi
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true

      - name: Add PR to project
        uses: actions/add-to-project@v1.0.2
        if: ${{ steps.find-pr.outputs.pr-number }}
        id: add-project
        with:
          project-url: https://github.com/users/DaveSkender/projects/1
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check current project status
        id: check-status
        if: ${{ steps.find-pr.outputs.pr-number && steps.add-project.outputs.itemId }}
        run: |
          # Query the project item to get current status
          ITEM_ID="${{ steps.add-project.outputs.itemId }}"

          # Use GitHub CLI to get project item status
          CURRENT_STATUS=$(gh project item-view $ITEM_ID --owner DaveSkender --format json | jq -r '.fields[] | select(.name == "Status") | .value // "null"')

          echo "Current status: $CURRENT_STATUS"

          # Define status progression: Icebox < Maybe < Do Next < In Progress < In Review < Done
          # Only update if current status is one of: Icebox, Maybe, Do Next, or null/empty
          case "$CURRENT_STATUS" in
            "Icebox"|"Maybe"|"Do Next"|"null"|""|null)
              echo "should-update=true" >> $GITHUB_OUTPUT
              echo "Status '$CURRENT_STATUS' is before 'In Progress', will update"
              ;;
            *)
              echo "should-update=false" >> $GITHUB_OUTPUT
              echo "Status '$CURRENT_STATUS' is 'In Progress' or later, no update needed"
              ;;
          esac
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true

      - name: Update project status to In Progress
        if: ${{ steps.find-pr.outputs.pr-number && steps.add-project.outputs.itemId && steps.check-status.outputs.should-update == 'true' }}
        run: |
          # Try using the display name as option ID (GitHub CLI may accept this)
          gh project item-edit \
            --id "${{ steps.add-project.outputs.itemId }}" \
            --field-id "1274949" \
            --project-id "151306" \
            --single-select-option-id "In Progress" || \
          # Fallback: use text parameter if option ID fails
          gh project item-edit \
            --id "${{ steps.add-project.outputs.itemId }}" \
            --field-id "1274949" \
            --project-id "151306" \
            --text "In Progress"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
