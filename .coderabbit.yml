# CodeRabbit Configuration for Stock Indicators for .NET
# Optimized for financial calculation accuracy, performance, and .NET best practices

# General settings
language: "en-US"
early_access: false
auto_review:
  enabled: true
  drafts: false
  base_branches:
    - main
    - develop

# Review configuration
reviews:
  profile: "chill" # Balanced approach - thorough but not overwhelming
  request_changes_workflow: false
  high_level_summary: true
  poem: false
  review_status: true
  collapse_empty_diff_files: false
  
  # Auto-approve simple changes
  auto_approve:
    enabled: true
    conditions:
      - "author == 'DaveSkender'"
      - "files_count <= 3"
      - "additions <= 50"
      - "only_docs"
      - "only_tests"

# Path-based configuration
path_instructions:
  # Source code - Focus on financial accuracy and performance
  - path: "src/**/*.cs"
    instructions: |
      Focus on:
      - **Mathematical accuracy**: Verify financial calculations against reference implementations
      - **Performance**: Flag unnecessary allocations, excessive LINQ, boxing operations
      - **Precision**: Ensure appropriate use of `double` vs `decimal` for financial calculations
      - **Null safety**: Validate handling of insufficient data scenarios
      - **Input validation**: Check parameter validation and error handling
      - **Lookback periods**: Verify off-by-one errors in window calculations
      - **Streaming support**: Ensure stateful indicators handle edge cases properly
      - **Memory efficiency**: Check for proper span usage and buffer management
      - **XML documentation**: Ensure all public APIs have complete documentation

  # Test files - Ensure comprehensive coverage and accuracy validation
  - path: "tests/**/*.cs"
    instructions: |
      Review for:
      - **Test coverage**: Ensure edge cases and boundary conditions are tested
      - **Mathematical validation**: Verify tests use manually calculated results
      - **Performance tests**: Check benchmark tests for regression detection
      - **Integration tests**: Validate API compatibility and chaining scenarios
      - **Streaming tests**: Ensure real-time scenarios are properly tested
      - **Error scenarios**: Verify exception handling and invalid input tests

  # Catalog files - API definition accuracy
  - path: "**/*.Catalog.cs"
    instructions: |
      Verify:
      - **Parameter definitions**: Check types, defaults, constraints match implementation
      - **Result definitions**: Ensure property names match Models exactly
      - **IReusable flags**: Verify only one result per indicator has isReusable=true
      - **Method names**: Follow To{IndicatorName} pattern consistently
      - **Category assignments**: Use appropriate technical analysis categories

  # Documentation - Accuracy and completeness
  - path: "docs/**/*.md"
    instructions: |
      Check for:
      - **Accuracy**: Ensure content matches current implementation
      - **Completeness**: Verify examples, parameters, and return values are documented
      - **Accessibility**: Flag missing alt text, poor heading hierarchy
      - **Link validity**: Check for broken internal/external links
      - **Mathematical formulas**: Verify calculation descriptions are correct

  # Jekyll site files
  - path: "docs/**/*.{html,liquid,scss,js}"
    instructions: |
      Focus on:
      - **Accessibility**: WCAG compliance, semantic HTML, proper ARIA labels
      - **Performance**: Optimize images, minimize CSS/JS, efficient loading
      - **Mobile responsiveness**: Ensure layouts work across devices
      - **SEO**: Check meta tags, structured data, semantic markup

  # Configuration and workflow files
  - path: ".github/**/*.yml"
    instructions: |
      Review for:
      - **Security**: No secrets in workflows, proper permissions
      - **Efficiency**: Optimize CI/CD performance, avoid redundant builds
      - **Dependencies**: Keep actions and versions current
      - **Error handling**: Proper failure scenarios and notifications

  # Project files and build configuration
  - path: "**/*.{csproj,props,targets,sln}"
    instructions: |
      Verify:
      - **Version consistency**: Package versions, target frameworks alignment
      - **Security**: No vulnerable packages, proper security settings
      - **Performance**: Compiler optimizations enabled for release builds
      - **Analyzers**: Code quality rules properly configured
      - **Packaging**: NuGet metadata complete and accurate

# File pattern rules
ignore:
  - "**/*.Designer.cs"    # Generated designer files
  - "**/bin/**"           # Build output
  - "**/obj/**"           # Build intermediate files
  - "**/*.g.cs"           # Generated source files
  - "**/node_modules/**"  # NPM dependencies
  - "**/.vs/**"           # Visual Studio files
  - "**/packages/**"      # NuGet packages cache
  - "**/*.bak"            # Backup files
  - "**/.jekyll-cache/**" # Jekyll cache
  - "**/Gemfile.lock"     # Ruby dependencies lock
  - "**/*.Calc.xlsx"      # Manual calculation spreadsheets (test artifacts)

# Knowledge base for financial domain
knowledge_base:
  - "This is a .NET library for technical analysis indicators used in financial markets"
  - "Performance is critical - prefer `double` over `decimal` unless price precision is essential"
  - "All indicators must handle insufficient data gracefully with null values"
  - "Lookback periods define minimum data required; warmup periods may differ"
  - "Streaming indicators maintain state between updates for real-time scenarios"
  - "IReusable interface enables indicator chaining with a primary Value property"
  - "ISeries interface is for indicators with multiple output values"
  - "Mathematical accuracy is validated against proven reference implementations"
  - "Code follows .NET Framework Design Guidelines and uses latest C# features"
  - "Documentation site is Jekyll-based with accessibility (a11y) requirements"

# Custom checks for financial calculations
checks:
  # Financial accuracy patterns
  - pattern: "decimal.*price"
    message: "Consider if `decimal` precision is necessary for this price calculation. Default to `double` for performance unless business accuracy requires decimal precision."
    
  - pattern: "double\\.NaN"
    message: "Ensure NaN handling is appropriate for this financial calculation scenario."
    
  # Performance patterns  
  - pattern: "\\.ToList\\(\\)"
    message: "Avoid unnecessary .ToList() calls in performance-critical paths. Consider using spans or direct enumeration."
    
  - pattern: "LINQ.*\\.Where.*\\.Select.*\\.Where"
    message: "Multiple LINQ chains may impact performance. Consider consolidating or using span-based operations."
    
  # Validation patterns
  - pattern: "ArgumentOutOfRangeException"
    message: "Ensure lookback period validation includes edge cases and provides clear error messages."
    
  # Documentation patterns
  - pattern: "public.*class.*\\{[^/]*$"
    message: "Public classes should have XML documentation comments explaining their purpose and usage."
    
  - pattern: "public.*\\(.*\\).*=>.*;"
    message: "Public methods should include XML documentation with parameter descriptions and return value details."

# Integration with existing tools
integration:
  # Respect existing .editorconfig rules
  editorconfig: true
  
  # Work with existing analyzers
  dotnet_analyzers: true
  
  # Coordinate with existing GitHub workflows
  github_actions: true

# Metrics and reporting preferences
reporting:
  # Key metrics for this repository type
  metrics:
    - "test_coverage"
    - "code_duplication" 
    - "cyclomatic_complexity"
    - "maintainability_index"
    - "performance_indicators"
    
  # Focus areas for dashboard
  focus_areas:
    - "mathematical_accuracy"
    - "performance_optimization"
    - "api_consistency"
    - "documentation_completeness"
    - "test_coverage"

# Custom review templates
templates:
  performance_review: |
    ## Performance Analysis
    - [ ] No unnecessary allocations in hot paths
    - [ ] Appropriate use of spans for array operations
    - [ ] LINQ usage optimized for performance
    - [ ] Proper handling of large datasets
    
  financial_accuracy: |
    ## Financial Calculation Review
    - [ ] Mathematical formulas verified against references
    - [ ] Precision appropriate (double vs decimal)
    - [ ] Edge cases handled (insufficient data, overflow)
    - [ ] Lookback periods calculated correctly
    
  api_consistency: |
    ## API Design Review
    - [ ] Method names follow To{IndicatorName} pattern
    - [ ] Parameter validation comprehensive
    - [ ] Return types consistent with similar indicators
    - [ ] XML documentation complete and accurate